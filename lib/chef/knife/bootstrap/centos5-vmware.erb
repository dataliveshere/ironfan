bash -c '
# explicitly set HOME in case it is overridden by sudo
HOME=/home/<%= knife_config[:ssh_user] %>

<%- if knife_config[:bootstrap_proxy]
proxy_env = "export http_proxy=#{knife_config[:bootstrap_proxy]} no_proxy=#{knife_config[:bootstrap_no_proxy]}"
%>
# add proxy setting into /etc/profile
grep -q "^export http_proxy" /etc/profile
test $? -ne 0 && echo "<%= proxy_env %>" >> /etc/profile

# export proxy setting for chef-client
<%= proxy_env %>
<%- end %>

<%- if knife_config[:bootstrap_proxy]
http, proxy_host, proxy_port = knife_config[:bootstrap_proxy].split(':')
%>
# add proxy setting for rpm command
(
cat <<'EOP'
%_httpproxy <%= proxy_host[2..-1] %>
%_httpport <%= proxy_port %>
EOP
) > ~/.rpmmacros
<%- end %>

# disable yum fastestmirror plugin since it is very slow when detecting the fastest mirror
<%= %q{sed -i "s|enabled=1|enabled=0|" /etc/yum/pluginconf.d/fastestmirror.conf} %>

# speed up yum package installation; default timeout is 30s and default retries is 10
<% yum_timeout = knife_config[:yum_timeout] || 10 %>
grep -q "^timeout=<%= yum_timeout %>" /etc/yum.conf
test $? -ne 0 &&
(
cat <<'EOP'
# speed up yum package installation
timeout=<%= yum_timeout %>
retries=5
EOP
) >> /etc/yum.conf

grep "sslverify=0" /etc/yum.conf > /dev/null
test $? -ne 0 &&
(
cat <<'EOP'
# ignore cert verification
sslverify=0
EOP
) >> /etc/yum.conf

# install chef-client
if [ ! -f /usr/bin/chef-client ]; then
  gem update --system --no-rdoc --no-ri
  gem install ohai --no-rdoc --no-ri --verbose
  gem install chef --no-rdoc --no-ri --verbose <%= bootstrap_version_string %>
fi

mkdir -p /etc/chef

# create tmp directory for bootstrap
mkdir -p /tmp/knife-bootstrap
chmod 700 /tmp/knife-bootstrap
cd /tmp/knife-bootstrap

## setup password-less ssh login
# create .ssh directory
mkdir -p ~/.ssh
chmod 700 -R ~/.ssh
if [ ! -f ~/.ssh/authorized_keys ]; then
  touch ~/.ssh/authorized_keys
fi
chmod 640 ~/.ssh/authorized_keys
chown -R serengeti.serengeti ~/.ssh

# generate ssh key pair
<%- home_path = `echo $HOME`.strip %>
<%- unless File.exist?("#{home_path}/.ssh/id_rsa.pub") %>
<%- system "ssh-keygen -t rsa -N '' -f #{home_path}/.ssh/id_rsa" %>
<%- end %>

# copy pub_key to authorized_keys
<%- pub_key = File.read("#{home_path}/.ssh/id_rsa.pub") %>
if [ `grep -c "<%= pub_key.strip %>" ~/.ssh/authorized_keys` == 0 ]; then
<%- unless pub_key.nil? && pub_key.empty? %>
(
cat <<'EOP'
<%= pub_key %>
EOP
) >> ~/.ssh/authorized_keys
<%- end %>
fi

<%- unless knife_config[:vm_use_default_password] %>
# Generate random password for VMs
<% usr_sbin_path = "/usr/sbin" %>
(
cat <<'EOP'
#!/usr/bin/python

import crypt, string, random, sys

salt_chars = string.ascii_letters + string.digits + "./"
salt = "".join([random.choice(salt_chars) for x in range(16)])

password = sys.stdin.readline().strip("\n")

encpw = crypt.crypt(password, "\$6\$%s\$" % salt)

sys.stdout.write(encpw + "\n")
EOP
) > <%= usr_sbin_path %>/password-crypt
chmod 775 <%= usr_sbin_path %>/password-crypt

(
cat <<'EOP'
#!/bin/bash

# With argument -a, this sets a random password and sets it up to be
# displayed on the login screen
# With a argument -u, the user is prompted for the password and the password
# which is set is not displayed on the screen.

LOGIN_MSG=<%= usr_sbin_path %>/login_msg
chmod 644 \$LOGIN_MSG

if [ \`id -u\` != 0 ]; then
  echo "Permission denied: run this script with root user"
  exit 1
fi

if [ "\$1" == "-u" ]; then
   # User set password
   read -p "New password: " -s p1 && echo && \\
   read -p "Retype password: " -s p2 && echo
   if [ \$? != 0 ]; then
      echo Not changing password
      exit 1
   fi
   if [ "\$p1" != "\$p2" ]; then
      echo Passwords do not match
      exit 1
   fi
   passwd="\$p1"
   display_passwd="Password set by user"
   notification=""
elif [ "\$1" == "-a" ]; then
   # Auto generated password
   passwd=\`openssl rand -base64 6\`
   if [ \$? != 0 ]; then
      echo "Error generating random password"
      exit 1
   fi
   display_passwd="\$passwd"
   notification="You can change password after login using script sudo <%= usr_sbin_path %>/serengeti-password -u"
else
   echo "Usage:" "\$0" "[ -a | -u ]"
   echo "   -a, set password using auto generated password"
   echo "   -u, user reset password"
   exit 1
fi

cryptpasswd=\`echo \$passwd | <%= usr_sbin_path %>/password-crypt\` && \\
rm -f \$LOGIN_MSG && \\

echo Login password -- "\$display_passwd" >\$LOGIN_MSG && \\
echo \$notification >> \$LOGIN_MSG && \\
chmod 600 \$LOGIN_MSG && \\
/usr/sbin/usermod -p "\$cryptpasswd" root && \\
if id serengeti >/dev/null 2>&1; then /usr/sbin/usermod -p "\$cryptpasswd" serengeti; fi
EOP
) > <%= usr_sbin_path %>/serengeti-password
chmod 775 <%= usr_sbin_path %>/serengeti-password

(
cat <<'EOP'
#!/bin/bash

tty=\`eval echo \\\\\\$\\\${#}\` # get last argument
tty=\`basename "\$tty"\`

exec </dev/\$tty >/dev/\$tty 2>&1

stty -echo
clear

MSG_FILE=<%= usr_sbin_path %>/login_msg
if [ -f \$MSG_FILE ]; then
  cat \$MSG_FILE
fi

while read c; do
  exec /sbin/mingetty --noclear  "\$@"
done
EOP
) > <%= usr_sbin_path %>/serengeti-tty
chmod 775 <%= usr_sbin_path %>/serengeti-tty

# Show a serengeti welcome screen instead of default login prompt on tty1. tty[2-6] are disabled.

## for CentOS 5
grep -q "release 5" /etc/redhat-release
if [ $? == 0 ]; then
  sed -i "s|^\(1:.*\):/sbin/mingetty|\1:<%= usr_sbin_path %>/serengeti-tty|" /etc/inittab
  sed -i "s|^\([2-6]:.*/sbin/mingetty\)|#\1|" /etc/inittab
  /sbin/init q
fi

## for CentOS 6
grep -q "release 6" /etc/redhat-release
if [ $? == 0 ]; then
  sed -i "s|ACTIVE_CONSOLES=.*|ACTIVE_CONSOLES=/dev/tty[1-1]|g" /etc/sysconfig/init
  sed -i "s|/sbin/mingetty|<%= usr_sbin_path %>/serengeti-tty|g" /etc/init/tty.conf
  sed -i "s|ACTIVE_CONSOLES=.*|ACTIVE_CONSOLES=/dev/tty[1-1]|g" /etc/init/start-ttys.conf
  /sbin/initctl stop tty TTY=/dev/tty1
  /sbin/initctl stop tty TTY=/dev/tty2
  /sbin/initctl stop tty TTY=/dev/tty3
  /sbin/initctl stop tty TTY=/dev/tty4
  /sbin/initctl stop tty TTY=/dev/tty5
  /sbin/initctl stop tty TTY=/dev/tty6
  /sbin/initctl start tty TTY=/dev/tty1
fi

if [ ! -f <%= usr_sbin_path %>/.serengeti-password.log ]; then
  <%= usr_sbin_path %>/serengeti-password -a > <%= usr_sbin_path %>/.serengeti-password.log
fi

<%- end %>

# generate /etc/chef/client.pem
<%- if @config[:client_key] %>
(
cat <<'EOP'
<%= @config[:client_key] %>
EOP
) > /tmp/knife-bootstrap/client.pem
awk NF /tmp/knife-bootstrap/client.pem > /etc/chef/client.pem
<%- end %>

<% if @chef_config[:encrypted_data_bag_secret] -%>
(
cat <<'EOP'
<%= encrypted_data_bag_secret %>
EOP
) > /tmp/encrypted_data_bag_secret
awk NF /tmp/encrypted_data_bag_secret > /etc/chef/encrypted_data_bag_secret
rm /tmp/encrypted_data_bag_secret
<% end -%>

(
cat <<'EOP'
<%= config_content %>
<%= "no_proxy          \"#{knife_config[:bootstrap_no_proxy]}\"" if knife_config[:bootstrap_no_proxy] %>
EOP
) > /etc/chef/client.rb

(
cat <<'EOP'
<%= { "run_list" => @run_list, "cluster_name" => @config[:node].cluster_name, "facet_name" => @config[:node].facet_name, "facet_index" => @config[:node].facet_index }.to_json %>
EOP
) > /etc/chef/first-boot.json

# Generate script for bootstrap node and setting node status
(
cat <<'EOP'
require "json"
node = Chef::Node.load("<%= @config[:node].name %>")
# Do not to run chef-client if powered on the VM by serengeti server
machine_id = \`/usr/sbin/vmware-rpctool "machine.id.get"\`

def should_continue(machine_id)
  attrs = JSON.parse(machine_id)
  new_uuid = attrs["bootupUUID"]

  return true if new_uuid.nil?
  uuid_file_name = "/opt/vmware/etc/serengeti_bootup_uuid"
  if File.file?(uuid_file_name)
    file = File.new(uuid_file_name, "r+")
    old_uuid = file.gets
    if (old_uuid != new_uuid)
      file.pos=(0)
      file.write(new_uuid)
      if File.file?("/etc/hadoop/conf/mapred.hosts.exclude")
        \`cat /dev/null > /etc/hadoop/conf/mapred.hosts.exclude\`
        \`cat /dev/null > /etc/hadoop/conf/dfs.hosts.exclude\`
      end
      return false
    else
      return true
    end

    file.close
  else
    file = File.new(uuid_file_name, "w")
    file.write(new_uuid)
    file.close
    return false
  end
end

if should_continue(machine_id) && (node[:forbid_run_when_boot].nil? || !node[:forbid_run_when_boot])
  # run chef-client
  ret = system("source /etc/profile; <%= start_chef %> > /etc/chef/bootstrap_node.log")
  node = Chef::Node.load("<%= @config[:node].name %>")
  # set node status
  node[:provision] ||= {}
  node[:provision][:status] = ret ? "Service Ready" : "Bootstrap Failed"
  # set node bootstrapped
  node[:provision][:bootstrapped] = ret
  node.save
end

EOP
) > /etc/chef/bootstrap_node.rb

# Let chef-client run after VM is powered on
<%- bootstrap_command = "knife exec /etc/chef/bootstrap_node.rb -c /etc/chef/client.rb > /dev/null" %>
grep "<%= bootstrap_command %>" /etc/rc.d/rc.local > /dev/null
if [ $? != 0 ]; then
(
cat <<'EOP'
ps -ef | grep -v "grep" | grep "chef-client"
if [ \$? != 0 ]; then
  <%= bootstrap_command %>
fi
EOP
) >> /etc/rc.d/rc.local
fi

ps -ef | grep -v "grep" | grep "chef-client"
if [ $? == 0 ]; then
   echo "chef-client is run by rc.local, kill it"
   ps -ef | grep -v "grep" | grep "chef-client" | awk '"'"'{print $1}'"'"' | xargs kill -9
fi

<%= start_chef %>
ret=$?

# kill mingetty or serengeti-tty to force it to respawn. vm console will be refreshed after respawn
ps -ef | grep -v "grep" | grep "tty1" | awk '"'"'{print $1}'"'"' | xargs kill

exit $ret'
