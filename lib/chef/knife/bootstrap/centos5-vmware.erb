bash -c '
<%= "export http_proxy=\"#{knife_config[:bootstrap_proxy]}\"" if knife_config[:bootstrap_proxy] -%>

<%- if knife_config[:bootstrap_proxy]
http, proxy_host, proxy_port = knife_config[:bootstrap_proxy].split(':')
%>
(
cat <<'EOP'
%_httpproxy <%= proxy_host[2..-1] %>
%_httpport <%= proxy_port %>
EOP
) > ~/.rpmmacros
<%- end %>

if [ ! -f /usr/bin/chef-client ]; then
  gem update --system --no-rdoc --no-ri
  gem install ohai --no-rdoc --no-ri --verbose
  gem install chef --no-rdoc --no-ri --verbose <%= bootstrap_version_string %>
fi

mkdir -p /etc/chef

# create tmp directory for bootstrap
mkdir -p /tmp/knife-bootstrap
chmod 700 /tmp/knife-bootstrap
cd /tmp/knife-bootstrap

## setup password-less ssh login
# create .ssh directory
mkdir -p ~/.ssh
chmod 700 -R ~/.ssh
if [ ! -f ~/.ssh/authorized_keys ]; then
  touch ~/.ssh/authorized_keys
fi
chmod 640 ~/.ssh/authorized_keys
chown -R serengeti.serengeti ~/.ssh

# generate ssh key pair
<%- home_path = `echo $HOME`.strip %>
<%- unless File.exist?("#{home_path}/.ssh/id_rsa.pub") %>
<%- system "ssh-keygen -t rsa -N '' -f #{home_path}/.ssh/id_rsa" %>
<%- end %>

# copy pub_key to authorized_keys
<%- pub_key = File.read("#{home_path}/.ssh/id_rsa.pub") %>
if [ `grep -c "<%= pub_key.strip %>" ~/.ssh/authorized_keys` == 0 ]; then
<%- unless pub_key.nil? && pub_key.empty? %>
(
cat <<'EOP'
<%= pub_key %>
EOP
) >> ~/.ssh/authorized_keys
<%- end %>
fi

# generate /etc/chef/client.pem
<%- if @config[:client_key] %>
(
cat <<'EOP'
<%= @config[:client_key] %>
EOP
) > /tmp/knife-bootstrap/client.pem
awk NF /tmp/knife-bootstrap/client.pem > /etc/chef/client.pem
<%- end %>

<% if @chef_config[:encrypted_data_bag_secret] -%>
(
cat <<'EOP'
<%= encrypted_data_bag_secret %>
EOP
) > /tmp/encrypted_data_bag_secret
awk NF /tmp/encrypted_data_bag_secret > /etc/chef/encrypted_data_bag_secret
rm /tmp/encrypted_data_bag_secret
<% end -%>

(
cat <<'EOP'
<%= config_content %>
EOP
) > /etc/chef/client.rb

(
cat <<'EOP'
<%= { "run_list" => @run_list, "cluster_name" => @config[:node].cluster_name, "facet_name" => @config[:node].facet_name, "facet_index" => @config[:node].facet_index }.to_json %>
EOP
) > /etc/chef/first-boot.json

# Generate script for bootstrap node and setting node status
(
cat <<'EOP'
node = Chef::Node.load("<%= @config[:node].name %>")
# run chef-client
ret = system("chef-client > /dev/null")
# set node status
status = ret ? "Service Ready" : "Bootstrap Failed"
node.current_normal[:provision][:status] = status
node.save
EOP
) > /etc/chef/bootstrap_node.rb

# Let chef-client run after VM is powered on
grep "knife exec /etc/chef/bootstrap_node.rb -c /etc/chef/client.rb > /dev/null" /etc/rc.d/rc.local
if [ $? != 0 ]; then
  echo "knife exec /etc/chef/bootstrap_node.rb -c /etc/chef/client.rb > /dev/null" >> /etc/rc.d/rc.local
fi

<%= start_chef %>'

